#!/usr/bin/python3
import argparse
import itertools
import string

# Define the command-line arguments
parser = argparse.ArgumentParser(description='Generate variations of words in an input file.')
parser.add_argument('-if', '--input-file', required=True, help='The file containing the words to generate variations for')
parser.add_argument('-of', '--output-file', required=True, help='The file to write the variations to')
args = parser.parse_args()

# Read the words from the input file
with open(args.input_file, 'r') as f:
    words = f.read().splitlines()

# The characters that each character in the words can be replaced with
REPLACEMENTS = {
    'a': 'aA4@',
    'b': 'bB8',
    'e': 'eE3',
    'g': 'gG6',
    'i': 'iI1!',
    'o': 'oO0',
    's': 'sS5$',
    't': 'tT7+',
    '?l': string.ascii_lowercase,  # Add all lowercase letters
    '?u': string.ascii_uppercase,  # Add all uppercase letters
    '?d': string.digits,  # Add all digits
    '?a': string.ascii_letters + string.digits + string.punctuation,  # Add all letters, digits, and punctuation
}

# Generate variations for every word in the input file
with open(args.output_file, 'w') as f:
    for word in words:
        # Create a list of the possible replacements for each character in the word
        variations = []
        for char in word:
            if char in '?alud':
                # Prioritize the '?a', '?u', '?l', and '?d' replacements over the corresponding individual character replacements
                if char == 'a':
                    variations.append(list(REPLACEMENTS['?a']))
                elif char == 'l':
                    variations.append(list(REPLACEMENTS['?l']))
                elif char == 'u':
                    variations.append(list(REPLACEMENTS['?u']))
                elif char == 'd':
                    variations.append(list(REPLACEMENTS['?d']))
            elif char in REPLACEMENTS:
                variations.append(list(REPLACEMENTS[char]))
            else:
                variations.append([char])

        # Generate all possible combinations of the variations
        for combination in itertools.product(*variations):
            f.write(''.join(combination) + '\n')
